service: import-service
frameworkVersion: '2'

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

custom:
  dotenv:
    required:
      file: true
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    websocketPort: 4001
  webpack:
    packager: "yarn"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  environment:
    CATALOG_ITEMS_QUEUE_SQS_URL: "${cf:product-service-${self:provider.stage}.SQSQueueUrl}"

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::${env:IMPORT_S3_BUCKET}"
    - Effect: "Allow"
      Action: "s3:*"
      Resource:
        - "arn:aws:s3:::${env:IMPORT_S3_BUCKET}/*"
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - "${cf:product-service-${self:provider.stage}.SQSQueueArn}"

functions:
  importProductsFile:
    handler: src/handlers/importProductsFile.handler
    events:
      - http:
          method: get
          path: import
          cors: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: BasicAuthorizer
          request:
            parameters:
              querystrings:
                name: true
                type: true

  importFileParser:
    handler: src/handlers/importFileParser.handler
    events:
      - s3:
          bucket: "${env:IMPORT_S3_BUCKET}"
          event: "s3:ObjectCreated:*"
          rules:
            - prefix: "${env:IMPORT_S3_UPLOAD_PREFIX}"
          existing: true

resources:
  Resources:
    BasicAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: BasicAuthorizer
        Type: TOKEN
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::ImportValue: BasicAuthorizerArn
        RestApiId:
          Ref: ApiGatewayRestApi

    # API Gateway validation does not include CORS headers (https://github.com/serverless/serverless/issues/3896)
    GatewayResponseDefault400:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"
    GatewayResponseAccessDeied:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: ACCESS_DENIED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"message\": $context.error.messageString }"
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: UNAUTHORIZED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"message\": $context.error.messageString }"
    GatewayResponseDefault500:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"
