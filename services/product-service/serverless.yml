service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "2"

# Add the serverless-webpack plugin
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

custom:
  dotenv:
    required:
      file: true
  webpack:
    packager: "yarn"

provider:
  name: aws
  runtime: nodejs12.x
  #  stage: dev
  region: us-east-2

  environment:
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]

    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

functions:
  getProductsList:
    handler: src/handlers/getProductsList.handler
    events:
      - http:
          method: get
          path: products
          cors: true

  createProduct:
    handler: src/handlers/createProduct.handler
    events:
      - http:
          method: post
          path: products
          cors: true
          request:
            schema:
              application/json: ${file(swagger.yml):components.schemas.ProductSchema}

  getProductsById:
    handler: src/handlers/getProductsById.handler
    events:
      - http:
          method: get
          path: products/{productId}
          cors: true
          request:
            parameters:
              paths:
                productId: true

  catalogBatchProcess:
    handler: src/handlers/catalogBatchProcess.handler
    events:
      - sqs:
          batchSize: 5
          arn: { Fn::GetAtt: [ SQSQueue, Arn ] }

resources:
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue

    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]

  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue

    SNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "createProductTopic"

    SNSSubscriptionProductImportSuccess:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: "${env:PRODUCT_IMPORT_SUCCESS_EMAIL}"
        Protocol: "email"
        TopicArn:
          Ref: "SNSTopic"
        FilterPolicy: {
            status: ["success"]
        }

    SNSSubscriptionProductImportFail:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: "${env:PRODUCT_IMPORT_FAIL_EMAIL}"
        Protocol: "email"
        TopicArn:
          Ref: "SNSTopic"
        FilterPolicy: {
          status: ["fail"]
        }

    # API Gateway validation does not include CORS headers (https://github.com/serverless/serverless/issues/3896)
    GatewayResponseDefault400:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"
    GatewayResponseDefault500:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"
